// <auto-generated />
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20180426161800_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Entities.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName");

                    b.Property<int?>("TeacherID");

                    b.HasKey("CourseID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Student", b =>
                {
                    b.Property<int>("studentID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("studentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StudentAddress", b =>
                {
                    b.Property<int>("StudentAddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress");

                    b.Property<int>("StudentID");

                    b.HasKey("StudentAddressID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("StudentAddresses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StundentCourse", b =>
                {
                    b.Property<int>("StundentCourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<int>("StudentID");

                    b.HasKey("StundentCourseID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("StundentCourse");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("TeacherID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Course", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherID");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StudentAddress", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithOne("StudentAddress")
                        .HasForeignKey("DataAccessLayer.Entities.StudentAddress", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StundentCourse", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Course", "Course")
                        .WithMany("StundentCourse")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Student", "Student")
                        .WithMany("StundentCourse")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
